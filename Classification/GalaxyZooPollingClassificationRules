#Alex Fay 4/10/2020 Not the best Code but it's 4am, and just needs to be done 

import pandas as pd
from pandas import ExcelWriter
from pandas import ExcelFile
from google.colab import files
import numpy as np

#=============Importing CSV and coloumns==============
#read csv file
file = "training_solutions_rev1.csv" #Galaxy Zoo Survey percents https://www.kaggle.com/c/galaxy-zoo-the-galaxy-challenge/overview/the-galaxy-zoo-decision-tree
df = pd.read_csv(file)
label = np.array([])

#Q1 Is galaxy smooth, round, or no disk
smooth = df['Class1.1']
disk = df['Class1.2']
star = df['Class1.3']

#Q2 is disk on edge
edgeOn = df['Class2.1']
notOnEdge = df['Class2.1']

#Q3 is bar of galaxy present
bar = df['Class3.1']
noBar = df['Class3.2']

#Q4 spiral arm patter present
spiralArmPresent = df['Class4.1']
noSpiralArm = df['Class4.2']

#Q5 central bulge
noBulge = df['Class5.1']
someBulge = df['Class5.2']
obviousBulge = df['Class5.3']
dominantBulge = df['Class5.4']

#Q6 odd image
odd = df['Class6.1']
notOdd = df['Class6.2']

#Q7 roundness
roundness = df['Class7.1']
semiRound = df['Class7.2']
longAndSkinny = df['Class7.3']

#Q8 ring
ring = df['Class8.1']
lensOrArc = df['Class8.2']
disturbed = df['Class8.3']
irregular = df['Class8.4']

#Q9
centerRound = df['Class9.1']
boxy = df['Class9.2']
centerNoBulge = df['Class9.3']

#Q10
tight = df['Class10.1']
medium = df['Class10.2']
loose = df['Class10.3']

#Q11
oneArm = df['Class11.1']
twoArms = df['Class11.2']
threeArms = df['Class11.3']
fourArms = df['Class11.4']
manyArms = df['Class11.5']
unknownArms = df['Class11.6']

#=========Summary of Decision Tree: https://static.zooniverse.org/data.galaxyzoo.org/data/gzh/images/GZ_HST.jpg========
#Q1: star => star, smooth -> Q7, disk -> Q2
#Q2: edgeon -> Q9, notedge -> Q3
#Q3: barPresent -> Q4, noBar -> Q4
#Q4: spiralArmPresent -> Q10, noArm -> Q5
#Q5: noBulge -> Q6, someBulge -> Q6, obviousBulge -> Q6, dominantBulge -> Q6
#Q6: odd -> Q8, notOdd -> end
#Q7: roud-> Q6, inbetween, cigarShaped -> Q6
#Q8: ring -> end, lens/arc -> end, disturbed -> end, irregular -> end, other -> end, merger -> end, dustLane -> end
#Q9: rounded -> Q6, boxy -> Q6, noBulge -> Q6
#Q10: tightSpiral -> Q11, mediumSpiral -> Q11, looseSpiral -> Q11
#Q11 SpiralArmNumber: 1-> Q5, 2-> Q5, 3->Q5, 4-> Q5, 4+-> Q5, can'tTell->Q5


#==========Results ==========
#---Stars--- q1 star
#-----Lenticular------
#S0 (lenticular Edge ON): Q1: disk, Q2: notEdge Q3: noBar, Q4: noArm, Q5: obviousBulge or dominantBulge, Q6: notOdd
#S0 (lenticular Edge Off): Q1: disk, Q2: edgeOn, Q9: !noBulge, Q6: notOdd (last test) Q4
#---Spiral w/o Bulge-----
#Sa: Q1: disk, Q2:edgeOn, Q9: rounded or noBulge, Q6: notOdd
#Sa EdgeOff: Q1: disk, Q2: edgeoff, Q3: noBar, Q4: spiralArmPresent, Q10: tightSpiral, Q11: !cantTell,
#Sb: Same above but Q10: mediumSpiral
#SC: Same Q10: loosSpiral
#-----Spiral W/ Bulge----
#Boxy central bulge
#Q1: disk, Q2:edgeOn, Q9: boxy, Q6: notOdd
#EdgeOff: Q1: disk, Q2: edgeoff, Q3: Bar, Q4: spiralArmPresent, Q10: any, Q11: !cantTell
#SBA: bar, tight arms
#SBb: bar, both tight and loose arms
#SBc: bar, loose arms
#----Irregular----
#Irregular: Q6: odd, Q8: irregular, all others
#(if dust lane,ring, lens, then spiral or elliptical NOT irregular)


def elliptical(i):
  if(smooth[i] > disk[i]):
    if(roundess | semiRound > longAndSkinny): #Elliptical Types: E0- E3
      if(notOdd[i] > odd[i]):
        label = np.append(label, "Elliptical")
    else:
     label = np.append(label, "Elliptical Cigar") #E4-E7
  else:
    return False

def spiral(i):
  booly = True
  if(disk[i] > smooth[i]): #Q1
    if(edgeOn[i] > notOnEdge[i]): #Q2
      if(boxy[i] < centerRound[i] | boxy[i] < centerNoBulge[i]):#Q9
        if(notOdd[i] > odd[i]): 
          label = np.append(label, "Spiral")
        elif((ring[i] + lensOrArc[i]) > (disturbed[i] + irregular[i])): #check irregular
          label = np.append(label, "Spiral")
        else: 
          booly = False
      elif(bar[i] > nobar[i]): #boxy galaxy with bar
        if(notOdd[i] > odd[i]):
          label = np.append(label, "Bar Spiral")
        elif((ring[i] + lensOrArc[i]) > (disturbed[i] + irregular[i])):
          label = np.append(label, "Bar Spiral")
        else:
          booly = False
      else:
        booly = False
    else:
      if(noBar[i] > bar[i]):
        if(spiralArmPresent[i] > noSpiralArm[i]):
          label = np.append(label, "Spiral")
        else: 
          booly = False
      else:
        if(notOdd[i] > odd[i]):
          label = np.append(label, "Bar Spiral")
        elif((ring[i] + lensOrArc[i]) > (disturbed[i] + irregular[i])):
          label = np.append(label, "Bar Spiral")
        else:
          booly = False
    else:
      booly = False
  return booly

def lenticular(i):
#S0 (lenticular Edge ON): Q1: disk, Q2: notEdge Q3: noBar, Q4: noArm, Q5: obviousBulge or dominantBulge, Q6: notOdd
#S0 (lenticular Edge Off): Q1: disk, Q2: edgeOn, Q9: !noBulge, Q6: notOdd (last test) Q4
  if(disk[i] > smooth[i]):
    if(notEdge[i] > edgeOn[i]):
      if(noBar[i] > bar[i]):
        if(noArm[i] > arm[i]):
          if((noBulge[i] + someBulge[i]) < (obviousBulge[i] + dominantBulge[i])):
            if(notOdd[i] > odd[i]):
              label = np.append(label, "Lenticular")
    else:
      if(noBulge[i] < .25):
        if(noSpiralArm[i] > spiralArmPresent[i]):
          if(notOdd[i] > odd[i]):
            label = np.append(label, "Lenticular")
  else:
    return False

#========Main==========
for i in df.index:
  if (star[i] > .47):
    label = np.append(label, 'STAR')
  else:
  elliptical(i) #all 3 types
    if (elliptical == False):
      spiral(i) #both bar and nobar
     if(booly = False):
       lenticular(i)
       if(lenticular(i) = False ):
        label = np.append(label, "Irregular")

#add values to csv
df['Type'] = str(label)
df.to_csv("training_solutions_rev1.csv")
